const admin = require("firebase-admin");

try {
  admin.initializeApp();
} catch (e) {
  console.log(e);
  //   yes this is meant to be empty
}
const db = admin.firestore();

const fetch = require("node-fetch");
const cheerio = require("cheerio");
const { v4: uuidv4 } = require("uuid");

const processRequest = async function () {
  const requestDoc = await db
    .collection("ridecountcomTrips")
    .doc("8DhatrYdyDVPNPWzLGcG")
    .get();

  const requestData = requestDoc.data();
  requestData.id = requestDoc.id;
  console.log(requestData);
  const requestDocRef = db.collection("ridecountcomTrips").doc(requestData.id);
  if (requestData.status !== 0) {
    return console.log("status not 0");
  }
  const requestUrl = requestData.tripLink;
  console.log(`Requesting url: ${requestUrl}`);
  const fetchResult = await fetch(requestUrl, {
    headers: {
      "User-Agent": "parkplanr.app",
    },
    referrer: "https://parkplanr.app",
    body: null,
    method: "GET",
  });
  console.log("Got fetch result");
  const resultBody = await fetchResult.text();
  console.log("Got result body");
  const $ = cheerio.load(resultBody);
  const parkName = $(
    "#app > main > div.bg-brand-lightest > div > div > div > div.my-8 > div > div.flex.md\\:ml-5.items-center.mb-4.md\\:mb-0 > div > p"
  )
    .text()
    .trim();
  console.log(parkName);
  const attractionsJson = JSON.parse(
    $("trip-show-attraction-list").attr(":initial-attractions")
  );
  console.log(attractionsJson);
  const uniqueAttractions = {};
  attractionsJson.forEach(function(attractionData) {
	console.log(attractionData);
	uniqueAttractions[attractionData['id']]=attractionData.name;
  });
  console.log(uniqueAttractions);
  const uniqueAttractionDocPromises = [];
  Object.keys(uniqueAttractions).forEach(function(attractionId) {
	uniqueAttractionDocPromises.push(
		db.collectionGroup("rides")
			.where("ridecountcomAttractionId","==",Number(attractionId))
			.get()
	);
  });
  uniqueAttractionDocs = await Promise.all(uniqueAttractionDocPromises);
  const attractionsData = {};
  uniqueAttractionDocs.forEach(function(attractionDocs) {
	let attractionId;
	if (attractionDocs.empty) {
//		console.log(attractionDocs.query);
		attractionId = attractionDocs.query._queryOptions.fieldFilters[0].value;
		console.log(`Attraction with ridecount.com ID: ${attractionId} not found`);
        } else {
		console.log("Attraction found");
		const attractionDoc = attractionDocs.docs[0];
		const attractionData = attractionDoc.data();
		attractionData.id = attractionDoc.id;
		attractionsData[attractionData['ridecountcomAttractionId']] = attractionData;
		console.log(attractionData);
        };
  });

   const obtainedAttractionCount = Object.keys(attractionsData).length;
   const expectedAttractionCount = Object.keys(uniqueAttractions).length;
   console.log(`Successfully obtained: ${obtainedAttractionCount} docs from firestore, out of expected: ${expectedAttractionCount}`);
   if (obtainedAttractionCount !== expectedAttractionCount) {
	console.log("Obtained attraction count does not match expected attraction count");
	console.log("This means there is an attraction in ridecount.com data that does not exist in firestore");
	const correlationId = uuidv4()
	console.log(`Correlation ID: ${correlationId}`);
	const missingAttractions = [];
	const missingAttractionIds = [];
	Object.keys(uniqueAttractions).forEach(function(attractionId) {
		if (!attractionsData[attractionId]) {
			const uniqueAttractionName = uniqueAttractions[attractionId];
			const missingAttraction = {
				id: Number(attractionId),
				name: uniqueAttractionName
			};
			console.log(`Ridecount.com attraction ID: ${attractionId} name: ${uniqueAttractionName} does not exist in firestore, correlationId: ${correlationId}`);
			missingAttractions.push(missingAttraction);
			missingAttractionIds.push(missingAttraction['id']);
		};
  	});
	await requestDocRef.set({
		status: 98,
		statusReason: `Missing attractions from firestore: ${correlationId}`,
		missingAttractions: missingAttractions,
		missingAttractionIds: missingAttractionIds
	}, {merge:true});
	return;
   };
};
processRequest();
